// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`macros should support Set: should support Set 1`] = `

import { producer } from '@c11/engine.macro'
const result = producer((
  a1 = Set.foo,
  a2 = Set[Prop.foo],
  a3 = Set[Arg.a2],
  a4 = Set.foo[Arg.bar.baz],
  a5 = Set.foo.bar[Arg.a2],
  a6 = {
    baz: Set.foo[Arg.a4].baz,
  },
  a7 = Set.foo[Arg.a5.baz],
  a8 = Set.foo[Param.prop],
  a9 = Set.foo[Param.prop].baz,
  a10 = Set.foo[Param.prop].baz[Prop.a2]
) => { })

      ↓ ↓ ↓ ↓ ↓ ↓

const result = {
  args: {
    type: "STRUCT",
    value: {
      a1: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          }
        ]
      },
      a2: {
        type: "SET",
        path: [
          {
            type: "EXTERNAL",
            path: ["foo"]
          }
        ]
      },
      a3: {
        type: "SET",
        path: [
          {
            type: "INTERNAL",
            path: ["a2"]
          }
        ]
      },
      a4: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "INTERNAL",
            path: ["bar", "baz"]
          }
        ]
      },
      a5: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "CONST",
            value: "bar"
          },
          {
            type: "INTERNAL",
            path: ["a2"]
          }
        ]
      },
      a6: {
        type: "STRUCT",
        value: {
          baz: {
            type: "SET",
            path: [
              {
                type: "CONST",
                value: "foo"
              },
              {
                type: "INTERNAL",
                path: ["a4"]
              },
              {
                type: "CONST",
                value: "baz"
              }
            ]
          }
        }
      },
      a7: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "INTERNAL",
            path: ["a5", "baz"]
          }
        ]
      },
      a8: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "INVOKE",
            path: ["prop"]
          }
        ]
      },
      a9: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "INVOKE",
            path: ["prop"]
          },
          {
            type: "CONST",
            value: "baz"
          }
        ]
      },
      a10: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "INVOKE",
            path: ["prop"]
          },
          {
            type: "CONST",
            value: "baz"
          },
          {
            type: "EXTERNAL",
            path: ["a2"]
          }
        ]
      }
    },
    meta: {
      order: ["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "a10"]
    }
  },
  fn: (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) => {}
};


`;
