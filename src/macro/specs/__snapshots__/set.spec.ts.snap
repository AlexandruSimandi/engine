// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`macros should support Set: should support Set 1`] = `

import { producer } from './build/macro/index.macro'
producer(({
  a1 = Set.foo,
  a2 = Set['@foo'],
  a3 = Set['$a2'],
  a4 = Set.foo['@bar.baz'],
  a5 = Set.foo.bar['$a2'],
  a6 = {
    baz: Set.foo['$a4'].baz,
  },
  a7 = Set.foo['$a5.baz'],
  a8 = Set.foo[':prop'],
  a9 = Set.foo[':prop'].baz,
  a10 = Set.foo[':prop'].baz['@a2']
}) => { })

      ↓ ↓ ↓ ↓ ↓ ↓

producer({
  args: {
    type: "STRUCT",
    value: {
      a1: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          }
        ]
      },
      a2: {
        type: "SET",
        path: [
          {
            type: "EXTERNAL",
            path: ["foo"]
          }
        ]
      },
      a3: {
        type: "SET",
        path: [
          {
            type: "INTERNAL",
            path: ["a2"]
          }
        ]
      },
      a4: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "EXTERNAL",
            path: ["bar", "baz"]
          }
        ]
      },
      a5: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "CONST",
            value: "bar"
          },
          {
            type: "INTERNAL",
            path: ["a2"]
          }
        ]
      },
      a6: {
        type: "STRUCT",
        value: {
          baz: {
            type: "SET",
            path: [
              {
                type: "CONST",
                value: "foo"
              },
              {
                type: "INTERNAL",
                path: ["a4"]
              },
              {
                type: "CONST",
                value: "baz"
              }
            ]
          }
        }
      },
      a7: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "INTERNAL",
            path: ["a5", "baz"]
          }
        ]
      },
      a8: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "INVOKE",
            path: "prop"
          }
        ]
      },
      a9: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "INVOKE",
            path: "prop"
          },
          {
            type: "CONST",
            value: "baz"
          }
        ]
      },
      a10: {
        type: "SET",
        path: [
          {
            type: "CONST",
            value: "foo"
          },
          {
            type: "INVOKE",
            path: "prop"
          },
          {
            type: "CONST",
            value: "baz"
          },
          {
            type: "EXTERNAL",
            path: ["a2"]
          }
        ]
      }
    }
  },
  fn: ({ a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 }) => {}
});


`;
